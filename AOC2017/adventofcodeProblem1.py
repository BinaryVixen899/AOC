#Advent of Code Problem 1 

#Part 1

# bignumber = '3893445835429722678558456317563893861752455542588369533636585887178232467588827193173595918648538852463974393264428538856739259399322741844613957229674619566966921656443476317729968764183945899765294481327998956154956571467872487576314549468261122281384513266834769436913544431258253346374641589492728885222652146158261225296144835682556133922436438188211288458692217737145834468534829945993366314375465767468939773939978272968388546791547526366348163672162245585168892858977723516752284597322176349412485116173844733679871253985762643852151748396593275274582481295864991886985988427966155944392352248314629138972358467959614279553511247863869663526823326467571462371663396188951696286916979923587358992127741723727623235238531991996999181976664226274715591531566495345212849683589582225465555847312199122268773923175183128124556249916458878785361322713513153175157855597289482439449732469754748544437553251412476225415932478849961897299721228198262823515159848941742786272262236888514421279147329383465929358896761449135917829473321834267122759371247338155787774952626616791265889922959653887288735233291968146648533754958199821789499914763279869931218136266492627818972334549751282191883558361871277375851259751294611921756927694394977764633932938573132221389861617195291742156362494769521829599476753198422283287735888197584327719697758442462886311961723849326959213928195182293316227334998926839139915138472514686689887874559367524254175582135318545912361877139367538434683933333264146289842238921989275112323681356256979576948644489986951538689949884787173194457523474156229389465725473817651516136514446513436419126533875125645855223921197481833434658264655912731133356464193251635637423222227273192628825165993827511625956856754776849919858414375874943572889154281862749595896438581889424559988914658387293414662361364793844213298677236787998677166743945812899526292132465751582925131262933636228593134861363493849168168765261647652342891576445292462341171477487223253795935253493869317616741963486473'
# #bignumber = '1111  
# total = 0

# test = [int(test) for test in str(bignumber)]
 

# print(test)
# print(len(test))

# itertest = iter(test)
# i = 0       


# print('precalculation total is')
# print(total)
# for digit in itertest:
#       #N
#       n = digit
#       print('n is')
#       print(n)

#       #M
#       i = i+1
#       try:
#             m = test[i]
#       except:
#             break
#       m = test[i]
#       print('m is')
#       print(m)
#       if n == m:
#             a = (n)
#             total = (total + a)
#             print('total')
#             print(total)

# print('totalbeforeis')
# print(total)
# if test[0] == test[-1]:
#       total = total + (test[0])
# print('total is')
# print(total)

#Part 2:

# Now, instead of considering the next digit, it wants you to consider the digit halfway around the circular list. That is, if your list contains 10 items, 
# only include a digit in your sum if the digit 10/2 = 5 steps forward matches it. Fortunately, your list has an even number of elements.

# For example:

# 1212 produces 6: the list contains 4 items, and all four digits match the digit 2 items ahead. -Check! 
# 1221 produces 0, because every comparison is between a 1 and a 2. -check
# 123425 produces 4, because both 2s match each other, but no other digit has a match. -check
# 123123 produces 12.t -check
# 12131415 produces 4. -check
# What is the solution to your new captcha?

#variables
captcha
total = 0
i = 0  
currentposition = 0
realposition = 1

#Solving

captchaiterable = [int(digit) for digit in str(captcha)]

captchalength = len(captchaiterable)
print('captchlengthis', captchalength)

truecaptchalength = captchalength - 1

skipaheadlength = (captchalength // 2)
print('skipaheadlength is', skipaheadlength)


for digit in captchaiterable: 
      #N
      n = digit
      print('firstdigit is',n)
      
      #M
      
      i = currentposition+skipaheadlength
      print('amountskippedahead is', i)
      
      try:
            m = captchaiterable[i]
      except:
            subtractlength = ((captchalength - realposition) + (1))
            #what about if i use skipaheadlength like, if subtractlength >skipaheadlength
            m = captchaiterable[0 + (skipaheadlength - subtractlength)]
            
     
      print('seconddigit is', m)    

      if n == m:
            a = (n)
            total = (total + a)
            print('total is',total)
            
      
      currentposition = currentposition + 1
      realposition = realposition + 1
      print('currentposition is', currentposition)

print(total)

#Misc
# for digit in biglist:
#       n = digit     
#       m = next(digit.append)
 


#Potentially iterate through each number in the sequence? 

# zipped = zip(digits, digits[::2])
# list(zipped)
# for x, y in zip(digits, digits[::2]):
#     if x == y:
#         finalist.append(x+y)
# print(finalist)
# print(sum(finalist))

# finalist = list()
# digits = [int(x) for x in str(bignumber)]
# d1 = (digits[::2])
# d2 = (digits[::-2])
# d2.reverse()
# print(d1)
# print(d2)
# for x, y in zip(d1,d2):
#    if x == y:
#          finalist.append(x+y)
# print(sum(finalist))

# print(zip(digits, digits[1:]))
# for x, y in zip(digits, digits[1:]):
#     if x == y:
#         finalist.append(x+y)
# print(finalist)
# print(sum(finalist))
